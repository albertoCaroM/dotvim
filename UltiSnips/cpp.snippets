extends c

snippet namespace "namespace google style"
namespace ${1:NAME} {
	$0
}  // namespace $1
endsnippet

snippet qDebug "qDebug"
qDebug() << $0 ;
endsnippet 

snippet tuple "std::pair tuple"
std::pair<${1:first},${2:second}> $0;
endsnippet


snippet typehash "typedef hash" 
typedef std::hash<${1:first}/*${2:firstName}*/,${3:second}/*${4:secondName}*/> ${5:TypeOfTuple};

static constexpr $1& get$5$2($5& arg_$5)
{
	return arg_$5.first;
}

static constexpr $3& get$5$4($5& arg_$5)
{
	return arg_$5.second;
}

endsnippet



snippet typedefTuple "typedef tuple"
typedef std::pair<${1:first}/*${2:firstName}*/,${3:second}/*${4:secondName}*/> ${5:TypeOfTuple};

static constexpr $1& get$5$2($5& arg_$5) constexpr 
{
	return arg_$5.first;
}

static constexpr $3& get$5$4($5& arg_$5) constexpr 
{
	return arg_$5.second;
}

$0
endsnippet


snippet cl "class .. (Capitalize class)"
class ${1:`!p snip.rv = snip.basename[0].upper() + snip.basename[1:] or "Name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet


snippet qclass "qt class"
#include<QObject>


class ${1:`!p snip.rv = snip.basename[0].upper() + snip.basename[1:] or "Name"`}  : public ${2:QObject}
{
	private:
		Q_OBJECT
	public:
	$1(${3:arguments});
signals:
			private slots:
};

endsnippet 


snippet enumclass "enum class"
	enum class ${1:tipo}  {
	$0,
	}; 
endsnippet

snippet qcoreapplication "qt class"
#include <QCoreApplication>

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);
		$0

    return a.exec();
}
endsnippet


snippet qdebugOperator "qt class"
QDebug operator<< (QDebug d, const ${1:tipo} &${2:name}) {
    d << "Hello world!";
    return d;
}
endsnippet

